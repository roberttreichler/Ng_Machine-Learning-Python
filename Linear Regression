{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "\n",
    "from sklearn import linear_model\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(action = \"ignore\", category = FutureWarning)\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train=pd.read_table('ex1data1.txt',sep=',',header=None,names=['population','profit'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 97 entries, 0 to 96\n",
      "Data columns (total 2 columns):\n",
      "population    97 non-null float64\n",
      "profit        97 non-null float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 1.6 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.1101</td>\n",
       "      <td>17.5920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.5277</td>\n",
       "      <td>9.1302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.5186</td>\n",
       "      <td>13.6620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.0032</td>\n",
       "      <td>11.8540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.8598</td>\n",
       "      <td>6.8233</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   population   profit\n",
       "0      6.1101  17.5920\n",
       "1      5.5277   9.1302\n",
       "2      8.5186  13.6620\n",
       "3      7.0032  11.8540\n",
       "4      5.8598   6.8233"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>97.000000</td>\n",
       "      <td>97.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.159800</td>\n",
       "      <td>5.839135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.869884</td>\n",
       "      <td>5.510262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.026900</td>\n",
       "      <td>-2.680700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.707700</td>\n",
       "      <td>1.986900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.589400</td>\n",
       "      <td>4.562300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.578100</td>\n",
       "      <td>7.046700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>22.203000</td>\n",
       "      <td>24.147000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       population     profit\n",
       "count   97.000000  97.000000\n",
       "mean     8.159800   5.839135\n",
       "std      3.869884   5.510262\n",
       "min      5.026900  -2.680700\n",
       "25%      5.707700   1.986900\n",
       "50%      6.589400   4.562300\n",
       "75%      8.578100   7.046700\n",
       "max     22.203000  24.147000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f7ab3304978>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7ab3a43cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(train['population'],train['profit'])\n",
    "plt.ylabel('profit')\n",
    "plt.xlabel('population')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 49.,  21.,  10.,   5.,   4.,   2.,   0.,   0.,   4.,   2.]),\n",
       " array([  5.0269 ,   6.74451,   8.46212,  10.17973,  11.89734,  13.61495,\n",
       "         15.33256,  17.05017,  18.76778,  20.48539,  22.203  ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7af870c470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['population'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  4.,  24.,  29.,  21.,   3.,   5.,   4.,   3.,   1.,   3.]),\n",
       " array([ -2.68070000e+00,   2.07000000e-03,   2.68484000e+00,\n",
       "          5.36761000e+00,   8.05038000e+00,   1.07331500e+01,\n",
       "          1.34159200e+01,   1.60986900e+01,   1.87814600e+01,\n",
       "          2.14642300e+01,   2.41470000e+01]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7aada0a6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train['profit'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "X=np.transpose(X)\n",
    "y=np.transpose(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7aa988e6a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "regr.fit(X, y)\n",
    "\n",
    "# plot it as in the example at http://scikit-learn.org/\n",
    "plt.scatter(X, y,  color='black')\n",
    "plt.plot(X, regr.predict(X), color='blue', linewidth=3)\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
